{"ast":null,"code":"import _regeneratorRuntime from \"/Volumes/WWW/benoda/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Volumes/WWW/benoda/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Volumes/WWW/benoda/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/WWW/benoda/src/pages/BlogHome.js\";\nimport React, { useEffect, useState } from 'react';\nimport { RichText } from 'prismic-reactjs';\nimport { Predicates } from 'prismic-javascript';\nimport { Header, PostList, DefaultLayout } from '../components';\nimport NotFound from './NotFound';\nimport { client } from '../utils/prismicHelpers';\n/**\n * Blog homepage component\n */\n\nvar BlogHome = function BlogHome() {\n  var _useState = useState({\n    homeDoc: null,\n    blogPosts: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      prismicData = _useState2[0],\n      setPrismicData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notFound = _useState4[0],\n      toggleNotFound = _useState4[1]; // Get the homepage and blog post documents from Prismic\n\n\n  useEffect(function () {\n    var fetchPrismicData =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var homeDoc, blogPosts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return client.getSingle('blog_home');\n\n              case 3:\n                homeDoc = _context.sent;\n                _context.next = 6;\n                return client.query(Predicates.at('document.type', 'post'), {\n                  orderings: '[my.post.date desc]'\n                });\n\n              case 6:\n                blogPosts = _context.sent;\n\n                if (homeDoc) {\n                  setPrismicData({\n                    homeDoc: homeDoc,\n                    blogPosts: blogPosts.results\n                  });\n                } else {\n                  console.warn('Blog Home document was not found. Make sure it exists in your Prismic repository');\n                  toggleNotFound(true);\n                }\n\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n                toggleNotFound(true);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      return function fetchPrismicData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchPrismicData();\n  }, []); // Return the page if a document was retrieved from Prismic\n\n  if (prismicData.homeDoc) {\n    var homeDoc = prismicData.homeDoc;\n    var blogPosts = prismicData.blogPosts;\n    var title = RichText.asText(homeDoc.data.headline);\n    return React.createElement(DefaultLayout, {\n      seoTitle: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Header, {\n      image: homeDoc.data.image,\n      headline: homeDoc.data.headline,\n      description: homeDoc.data.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(PostList, {\n      posts: blogPosts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  } else if (notFound) {\n    return React.createElement(NotFound, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n  return null;\n};\n\nexport default BlogHome;","map":{"version":3,"sources":["/Volumes/WWW/benoda/src/pages/BlogHome.js"],"names":["React","useEffect","useState","RichText","Predicates","Header","PostList","DefaultLayout","NotFound","client","BlogHome","homeDoc","blogPosts","prismicData","setPrismicData","notFound","toggleNotFound","fetchPrismicData","getSingle","query","at","orderings","results","console","warn","error","title","asText","data","headline","image","description"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,aAA3B,QAAgD,eAAhD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AAEA;;;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACiBR,QAAQ,CAAC;AAAES,IAAAA,OAAO,EAAE,IAAX;AAAiBC,IAAAA,SAAS,EAAE;AAA5B,GAAD,CADzB;AAAA;AAAA,MACdC,WADc;AAAA,MACDC,cADC;;AAAA,mBAEcZ,QAAQ,CAAC,KAAD,CAFtB;AAAA;AAAA,MAEda,QAFc;AAAA,MAEJC,cAFI,kBAIrB;;;AACAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAECR,MAAM,CAACS,SAAP,CAAiB,WAAjB,CAFD;;AAAA;AAEfP,gBAAAA,OAFe;AAAA;AAAA,uBAGGF,MAAM,CAACU,KAAP,CACtBf,UAAU,CAACgB,EAAX,CAAc,eAAd,EAA+B,MAA/B,CADsB,EAEtB;AAAEC,kBAAAA,SAAS,EAAE;AAAb,iBAFsB,CAHH;;AAAA;AAGfT,gBAAAA,SAHe;;AAQrB,oBAAID,OAAJ,EAAa;AACXG,kBAAAA,cAAc,CAAC;AAAEH,oBAAAA,OAAO,EAAPA,OAAF;AAAWC,oBAAAA,SAAS,EAAEA,SAAS,CAACU;AAAhC,mBAAD,CAAd;AACD,iBAFD,MAEO;AACLC,kBAAAA,OAAO,CAACC,IAAR,CAAa,kFAAb;AACAR,kBAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAboB;AAAA;;AAAA;AAAA;AAAA;AAerBO,gBAAAA,OAAO,CAACE,KAAR;AACAT,gBAAAA,cAAc,CAAC,IAAD,CAAd;;AAhBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAhBC,gBAAgB;AAAA;AAAA;AAAA,OAAtB;;AAoBAA,IAAAA,gBAAgB;AACjB,GAtBQ,EAsBN,EAtBM,CAAT,CALqB,CA6BrB;;AACA,MAAIJ,WAAW,CAACF,OAAhB,EAAyB;AACvB,QAAMA,OAAO,GAAGE,WAAW,CAACF,OAA5B;AACA,QAAMC,SAAS,GAAGC,WAAW,CAACD,SAA9B;AACA,QAAMc,KAAK,GAAGvB,QAAQ,CAACwB,MAAT,CAAgBhB,OAAO,CAACiB,IAAR,CAAaC,QAA7B,CAAd;AAEA,WACE,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAEH,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAEf,OAAO,CAACiB,IAAR,CAAaE,KADtB;AAEE,MAAA,QAAQ,EAAEnB,OAAO,CAACiB,IAAR,CAAaC,QAFzB;AAGE,MAAA,WAAW,EAAElB,OAAO,CAACiB,IAAR,CAAaG,WAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEnB,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD,GAfD,MAeO,IAAIG,QAAJ,EAAc;AACnB,WAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SAAO,IAAP;AACD,CAjDD;;AAmDA,eAAeL,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { RichText } from 'prismic-reactjs';\nimport { Predicates } from 'prismic-javascript';\n\nimport { Header, PostList, DefaultLayout } from '../components';\nimport NotFound from './NotFound';\nimport { client } from '../utils/prismicHelpers';\n\n/**\n * Blog homepage component\n */\nconst BlogHome = () => {\n  const [prismicData, setPrismicData] = useState({ homeDoc: null, blogPosts: null });\n  const [notFound, toggleNotFound] = useState(false);\n\n  // Get the homepage and blog post documents from Prismic\n  useEffect(() => {\n    const fetchPrismicData = async () => {\n      try {\n        const homeDoc = await client.getSingle('blog_home');\n        const blogPosts = await client.query(\n          Predicates.at('document.type', 'post'),\n          { orderings: '[my.post.date desc]' }\n        );\n  \n        if (homeDoc) {\n          setPrismicData({ homeDoc, blogPosts: blogPosts.results });\n        } else {\n          console.warn('Blog Home document was not found. Make sure it exists in your Prismic repository');\n          toggleNotFound(true);\n        }\n      } catch (error) {\n        console.error(error);\n        toggleNotFound(true);\n      }\n    }\n\n    fetchPrismicData();\n  }, []);\n\n  // Return the page if a document was retrieved from Prismic\n  if (prismicData.homeDoc) {\n    const homeDoc = prismicData.homeDoc;\n    const blogPosts = prismicData.blogPosts;\n    const title = RichText.asText(homeDoc.data.headline);\n\n    return (\n      <DefaultLayout seoTitle={title}>\n        <Header\n          image={homeDoc.data.image}\n          headline={homeDoc.data.headline}\n          description={homeDoc.data.description}\n        />\n        <PostList posts={blogPosts} />\n      </DefaultLayout>\n    );\n  } else if (notFound) {\n    return <NotFound />;\n  }\n  return null;\n}\n\nexport default BlogHome;\n"]},"metadata":{},"sourceType":"module"}