{"ast":null,"code":"import _regeneratorRuntime from \"/Volumes/WWW/benoda/frontell/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Volumes/WWW/benoda/frontell/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Volumes/WWW/benoda/frontell/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/WWW/benoda/frontell/src/pages/Post.js\";\nimport React, { useEffect, useState } from 'react';\nimport { RichText } from 'prismic-reactjs';\nimport { DefaultLayout, BackButton, SliceZone } from '../components';\nimport NotFound from './NotFound';\nimport { client } from '../utils/prismicHelpers';\n/**\n * Blog post page component\n */\n\nvar Post = function Post(_ref) {\n  var match = _ref.match;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      prismicDoc = _useState2[0],\n      setPrismicDoc = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notFound = _useState4[0],\n      toggleNotFound = _useState4[1];\n\n  var uid = match.params.uid; // Get the blog post document from Prismic\n\n  useEffect(function () {\n    var fetchPrismicData =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var doc;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return client.getByUID('post', uid);\n\n              case 3:\n                doc = _context.sent;\n\n                if (doc) {\n                  setPrismicDoc(doc);\n                } else {\n                  console.warn('Blog post document was not found. Make sure it exists in your Prismic repository');\n                  toggleNotFound(true);\n                }\n\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n                toggleNotFound(true);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function fetchPrismicData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchPrismicData();\n  }, [uid]); // Return the page if a document was retrieved from Prismic\n\n  if (prismicDoc) {\n    var title = prismicDoc.data.title.length !== 0 ? RichText.asText(prismicDoc.data.title) : 'Untitled';\n    return React.createElement(DefaultLayout, {\n      wrapperClass: \"main\",\n      seoTitle: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"outer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(BackButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, title)), React.createElement(SliceZone, {\n      sliceZone: prismicDoc.data.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }));\n  } else if (notFound) {\n    return React.createElement(NotFound, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  }\n\n  return null;\n};\n\nexport default Post;","map":{"version":3,"sources":["/Volumes/WWW/benoda/frontell/src/pages/Post.js"],"names":["React","useEffect","useState","RichText","DefaultLayout","BackButton","SliceZone","NotFound","client","Post","match","prismicDoc","setPrismicDoc","notFound","toggleNotFound","uid","params","fetchPrismicData","getByUID","doc","console","warn","error","title","data","length","asText","body"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,QAAqD,eAArD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AAEA;;;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACUR,QAAQ,CAAC,IAAD,CADlB;AAAA;AAAA,MACnBS,UADmB;AAAA,MACPC,aADO;;AAAA,mBAESV,QAAQ,CAAC,KAAD,CAFjB;AAAA;AAAA,MAEnBW,QAFmB;AAAA,MAETC,cAFS;;AAI1B,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAN,CAAaD,GAAzB,CAJ0B,CAM1B;;AACAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEHT,MAAM,CAACU,QAAP,CAAgB,MAAhB,EAAwBH,GAAxB,CAFG;;AAAA;AAEfI,gBAAAA,GAFe;;AAIrB,oBAAIA,GAAJ,EAAS;AACPP,kBAAAA,aAAa,CAACO,GAAD,CAAb;AACD,iBAFD,MAEO;AACLC,kBAAAA,OAAO,CAACC,IAAR,CAAa,kFAAb;AACAP,kBAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAToB;AAAA;;AAAA;AAAA;AAAA;AAWrBM,gBAAAA,OAAO,CAACE,KAAR;AACAR,gBAAAA,cAAc,CAAC,IAAD,CAAd;;AAZqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAhBG,gBAAgB;AAAA;AAAA;AAAA,OAAtB;;AAgBAA,IAAAA,gBAAgB;AACjB,GAlBQ,EAkBN,CAACF,GAAD,CAlBM,CAAT,CAP0B,CA2B1B;;AACA,MAAIJ,UAAJ,EAAgB;AACd,QAAMY,KAAK,GACTZ,UAAU,CAACa,IAAX,CAAgBD,KAAhB,CAAsBE,MAAtB,KAAiC,CAAjC,GACAtB,QAAQ,CAACuB,MAAT,CAAgBf,UAAU,CAACa,IAAX,CAAgBD,KAAhC,CADA,GAEA,UAHF;AAKA,WACE,oBAAC,aAAD;AAAe,MAAA,YAAY,EAAC,MAA5B;AAAmC,MAAA,QAAQ,EAAEA,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAL,CAFF,CADF,EAKE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEZ,UAAU,CAACa,IAAX,CAAgBG,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AASD,GAfD,MAeO,IAAId,QAAJ,EAAc;AACnB,WAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SAAO,IAAP;AACD,CA/CD;;AAiDA,eAAeJ,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { RichText } from 'prismic-reactjs';\n\nimport { DefaultLayout, BackButton, SliceZone } from '../components';\nimport NotFound from './NotFound';\nimport { client } from '../utils/prismicHelpers';\n\n/**\n * Blog post page component\n */\nconst Post = ({ match }) => {\n  const [prismicDoc, setPrismicDoc] = useState(null);\n  const [notFound, toggleNotFound] = useState(false);\n\n  const uid = match.params.uid;\n\n  // Get the blog post document from Prismic\n  useEffect(() => {\n    const fetchPrismicData = async () => {\n      try {\n        const doc = await client.getByUID('post', uid);\n  \n        if (doc) {\n          setPrismicDoc(doc);\n        } else {\n          console.warn('Blog post document was not found. Make sure it exists in your Prismic repository');\n          toggleNotFound(true);\n        }\n      } catch (error) {\n        console.error(error);\n        toggleNotFound(true);\n      }\n    }\n\n    fetchPrismicData();\n  }, [uid]);\n\n  // Return the page if a document was retrieved from Prismic\n  if (prismicDoc) {\n    const title =\n      prismicDoc.data.title.length !== 0 ?\n      RichText.asText(prismicDoc.data.title) :\n      'Untitled';\n\n    return (\n      <DefaultLayout wrapperClass=\"main\" seoTitle={title}>\n        <div className=\"outer-container\">\n          <BackButton />\n          <h1>{title}</h1>\n        </div>\n        <SliceZone sliceZone={prismicDoc.data.body} />\n      </DefaultLayout>\n    );\n  } else if (notFound) {\n    return <NotFound />;\n  }\n  return null;\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}